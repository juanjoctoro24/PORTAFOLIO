IF NOT EXISTS (SELECT * FROM sys.databases WHERE NAME = 'TEMATG') 
BEGIN 
CREATE DATABASE TEMATG 
END 

USE TEMATG

CREATE TABLE COMPRA(
ID_COMPRA INT PRIMARY KEY NOT NULL ,
FECHA_COMPRA DATETIME,
TOTAL_COMPRA MONEY
);

CREATE TABLE PRODUCTO(
ID_PRODUCTO INT PRIMARY KEY NOT NULL , 
ID_COMPRA INT,
NOMBRE_PRODUCTO VARCHAR (50),
PRECIO_PRODUCTO MONEY
FOREIGN KEY (ID_COMPRA) REFERENCES COMPRA (ID_COMPRA)
);



INSERT INTO COMPRA VALUES (1, '2023-10-26' , 80000)

INSERT INTO PRODUCTO VALUES (1,1,'TORTA DE CHOCOLATE',70000)
INSERT INTO PRODUCTO VALUES (2,1,'COCA-COLA MEGA' , 10000)
INSERT INTO PRODUCTO VALUES (3,1,'PIÑATA VENGADORES',20000)

SELECT *  FROM PRODUCTO
SELECT *  FROM COMPRA

--	Creación de un trigger.
CREATE TRIGGER CALCULAR_COMPRA 
ON PRODUCTO
FOR UPDATE 
AS
DECLARE @IDCOMPRA INT = (SELECT ID_COMPRA FROM inserted)
UPDATE COMPRA SET TOTAL_COMPRA = 
(SELECT SUM(PRECIO_PRODUCTO) FROM PRODUCTO)
WHERE ID_COMPRA=@IDCOMPRA


SELECT * FROM sys.triggers

--vamos a alterar el precio de un producto para ver si afecta el total.

update PRODUCTO
set PRECIO_PRODUCTO =15000
where ID_PRODUCTO= 2

update PRODUCTO
set PRECIO_PRODUCTO =70000
where ID_PRODUCTO= 1

--DESARROLLAR UN TRIGGER DE ADVERTENCIA DE BORRADO.
CREATE TRIGGER BORRADO_REGISTRO
ON PRODUCTO INSTEAD OF DELETE 
AS 
PRINT 'SE VA A BORRAR UN REGISTRO DE LA TABLA PRODUCTO'

DELETE FROM PRODUCTO
WHERE NOMBRE_PRODUCTO = 'TORTA DE CHOCOLATE'
AND PRECIO_PRODUCTO = 50000;

--EJEMPLO 2 CONTROLAR CAMBIOS EN TABLAS.
IF NOT EXISTS (SELECT * FROM sys.sysobjects
WHERE name = 'SUPERMERCADO' AND xtype = 'U')
BEGIN 
CREATE TABLE SUPERMERCADO(
ID_SUPERM INT PRIMARY KEY NOT NULL,
ESTADO VARCHAR (100) DEFAULT 'INICIO',
FECHA_CAMBIO_ESTADO DATETIME)
END;

INSERT INTO SUPERMERCADO (ID_SUPERM) VALUES (1)
INSERT INTO SUPERMERCADO (ID_SUPERM) VALUES (2)
INSERT INTO SUPERMERCADO (ID_SUPERM) VALUES (3)

SELECT * FROM SUPERMERCADO

CREATE TABLE CAMBIO_ESTADO_FECHA(
ID_CAMBIOE INT IDENTITY PRIMARY KEY NOT NULL,
ID_SUPERM INT,
ESTADO VARCHAR (100),
FECHA_CAMBIO DATETIME DEFAULT GETDATE()
);

SELECT * FROM SUPERMERCADO
SELECT * FROM CAMBIO_ESTADO_FECHA

--CREANDO EL TRIGGER DE CAMBIO DE ESTADO Y VISUALIZACION DE FECHA.

CREATE TRIGGER CAMBIO_ESTADOF
ON SUPERMERCADO
AFTER UPDATE 
AS
IF UPDATE (ESTADO) 
BEGIN 
UPDATE SUPERMERCADO SET FECHA_CAMBIO_ESTADO = GETDATE()
WHERE ID_SUPERM = (SELECT ID_SUPERM FROM inserted);
INSERT INTO CAMBIO_ESTADO_FECHA ( ID_SUPERM , ESTADO)
(SELECT ID_SUPERM, ESTADO FROM deleted
WHERE ID_SUPERM = deleted.ID_SUPERM);
END;

UPDATE SUPERMERCADO SET ESTADO = 'CANCELADO' WHERE ID_SUPERM = 1
UPDATE SUPERMERCADO SET ESTADO = 'POR HACER' WHERE ID_SUPERM = 2
UPDATE SUPERMERCADO SET ESTADO = 'TERMINADO' WHERE ID_SUPERM = 3

--OTRO EJEMPLO DE CAMBIO DE DATOS EN UNA TABLA 
CREATE TABLE EMPLEADO(
ID_EMPLEADO INT PRIMARY KEY,
NOMBRE_EMPLEADO VARCHAR (50),
SALARIO MONEY);

CREATE TABLE CAMBIO_SALARIO(
ID_CAMBIO_SALA INT PRIMARY KEY,
ID_EMPLEADO INT,
SALARIO MONEY,
CAMBIO_SAL MONEY,
FECHA_CAMBIO DATETIME
);

INSERT INTO EMPLEADO VALUES (1, 'JUAN' , 350000)
INSERT INTO EMPLEADO VALUES (2, 'JULIAN' , 380000)
INSERT INTO EMPLEADO VALUES (3, 'GERMAN' , 150000)

                           

--CREANDO EL TRIGGER DE CAMBIO DE SALARIO
CREATE TRIGGER CAMBIO_SALARIOE
ON EMPLEADO
AFTER UPDATE
AS
IF UPDATE (SALARIO)
BEGIN
UPDATE EMPLEADO SET SALARIO = SUM()
WHERE ID_EMPLEADO = (SELECT ID_EMPLEADO FROM inserted);
INSERT INTO SALARIO (ID_EMPLEADO ,SALARIO)
(SELECT ID_EMPLEADO ,SALARIO FROM deleted WHERE ID_EMPLEADO =deleted.ID_EMPLEADO);
END;

--EJEMPLO 4 CON CAMBIOS

CREATE TABLE Employees (
EmployeeID integer NOT NULL IDENTITY(1, 1) ,
EmployeeName VARCHAR(50) ,
EmployeeAddress VARCHAR(50) ,
MonthSalary NUMERIC(10, 2)
PRIMARY KEY CLUSTERED (EmployeeID) )
GOCREATE TABLE EmployeesAudit (
AuditID INTEGER NOT NULL IDENTITY(1, 1) ,
EmployeeID INTEGER ,
EmployeeName VARCHAR(50) ,
EmployeeAddress VARCHAR(50) ,
MonthSalary NUMERIC(10, 2) ,
ModifiedBy VARCHAR(128) ,
ModifiedDate DATETIME ,
Operation CHAR(1) PRIMARY KEY CLUSTERED ( AuditID ) )
GO

--INSERTANDO DATOS.
INSERT INTO dbo.Employees ( EmployeeName , EmployeeAddress , MonthSalary )
SELECT 'Mark Smith', 'Ocean Dr 1234', 10000
UNION ALL SELECT 'Joe Wright', 'Evergreen 1234', 12000
UNION ALL SELECT 'John Doe', 'International Dr 1234', 14000
UNION ALL SELECT 'Peter Rodriguez', '74 Street 1234', 18000
GOSELECT *FROM dbo.Employees

-- CREACION DE TRIGGER DE LOS 3 MOMENTOS

CREATE TRIGGER TR_Audit_Employees
ON dbo.Employees
FOR INSERT, UPDATE, DELETE
AS DECLARE @login_name VARCHAR(128)
SELECT @login_name = login_name
FROM sys.dm_exec_sessions
WHERE session_id = @@SPID
IF EXISTS ( SELECT 0 FROM Deleted )
BEGIN IF EXISTS ( SELECT 0 FROM Inserted )
BEGIN INSERT INTO dbo.EmployeesAudit ( EmployeeID , EmployeeName , EmployeeAddress ,
MonthSalary , ModifiedBy , ModifiedDate , Operation )
SELECT D.EmployeeID , D.EmployeeName , D.EmployeeAddress , D.MonthSalary ,
@login_name , GETDATE() , 'U' FROM Deleted D
END
ELSE
BEGIN INSERT INTO dbo.EmployeesAudit ( EmployeeID , EmployeeName , EmployeeAddress ,
MonthSalary , ModifiedBy , ModifiedDate , Operation )
SELECT D.EmployeeID , D.EmployeeName , D.EmployeeAddress , D.MonthSalary ,
@login_name , GETDATE() , 'D' FROM Deleted D
END
END
ELSE
BEGIN INSERT INTO dbo.EmployeesAudit ( EmployeeID , EmployeeName , EmployeeAddress ,
MonthSalary , ModifiedBy , ModifiedDate , Operation )
SELECT I.EmployeeID , I.EmployeeName , I.EmployeeAddress , I.MonthSalary ,
@login_name , GETDATE() , 'I' FROM Inserted I
END
GO


-- PROBANDO EL TRIGGER POR PARTES 
BEGIN TRANSACTION
SELECT *
FROM dbo.Employees
WHERE EmployeeID = 1
UPDATE Employees
SET EmployeeName = 'Jhon Smith'
WHERE EmployeeID = 1
SELECT *
FROM dbo.Employees
WHERE EmployeeID = 1
SELECT *
FROM dbo.EmployeesAudit
ROLLBACK TRANSACTION--PROBANDO CAMBIOS CON DIFERENTES ATRIBUTOSBEGIN TRANSACTION
INSERT INTO dbo.Employees ( EmployeeName , EmployeeAddress , MonthSalary )
SELECT 'zz' , 'dsda' , 10000 UNION ALL
SELECT 'Markus Rubius' , 'dsda' , 6000
SELECT *
FROM dbo.Employees
SELECT *
FROM dbo.EmployeesAudit
ROLLBACK TRANSACTION--BORRANDO DATOS DE LA TABLA BEGIN TRANSACTION
SELECT *
FROM dbo.Employees
WHERE EmployeeID = 1
DELETE FROM dbo.Employees
WHERE EmployeeID = 1
SELECT *
FROM dbo.EmployeesAudit
SELECT *
FROM dbo.Employees
WHERE EmployeeID = 1
ROLLBACK TRANSACTIONSELECT * FROM Employees